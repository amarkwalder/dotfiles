#!/bin/bash

source $DOTFILES_DIRECTORY/shell/functions/systeminfo --load

# Header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if $( brew list $1 > /dev/null 2>&1 ); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

# Test whether a Homebrew cask formula is already installed
# $1 - formula name (may include options)
formula_cask_exists() {
    if $( brew cask list $1 > /dev/null 2>&1 ); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}

# Test whether a apt-get package is already installed
# $1 - component name
package_exists() {
    if $(sudo apt -qq list $1 2>/dev/null | grep -q installed); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing package: $1"
    return 1
}

# Install via homebrew
# $@ - components
install_cask_on_mac() {

    e_header "Checking status of desired Homebrew formulae (cask) ..."
    local list_formulae
    local -a missing_formulae
    local -a desired_formulae=(
        $@
    )

    for index in ${!desired_formulae[*]}
    do
        if ! formula_cask_exists ${desired_formulae[$index]}; then
            # Store the name (and options) of every missing formula
            missing_formulae=("${missing_formulae[@]}" "${desired_formulae[$index]}")
        fi
    done

    if [[ "$missing_formulae" ]]; then
        # Convert the array of missing formula into a list of space-separate strings
        list_formulae=$( printf "%s " "${missing_formulae[@]}" )

        e_header "Installing missing Homebrew formulae (cask) ..."
        # Install all missing formulae
        brew cask install $list_formulae
    fi
}

# Install via homebrew
# $@ - components
install_on_mac() {

    e_header "Checking status of desired Homebrew formulae ..."
    local list_formulae
    local -a missing_formulae
    local -a desired_formulae=(
        $@
    )

    for index in ${!desired_formulae[*]}
    do
        if ! formula_exists ${desired_formulae[$index]}; then
            # Store the name (and options) of every missing formula
            missing_formulae=("${missing_formulae[@]}" "${desired_formulae[$index]}")
        fi
    done

    if [[ "$missing_formulae" ]]; then
        # Convert the array of missing formula into a list of space-separate strings
        list_formulae=$( printf "%s " "${missing_formulae[@]}" )

        e_header "Installing missing Homebrew formulae ..."
        # Install all missing formulae
        brew install $list_formulae
    fi
}
