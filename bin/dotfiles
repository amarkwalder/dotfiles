#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/amarkwalder/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/amarkwalder/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/install

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

run_preinstall

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    git reset --hard FETCH_HEAD
    git clean -fd
    [[ $? ]] && e_success "Done"
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    git pull --rebase origin master
    git submodule update --recursive --init --quiet
    [[ $? ]] && e_success "Done"
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    run_install
fi

# Install software
install() {
    declare -a files=(
        $HOME/.dotfiles/install/*
    )

    # if these files are readable, source them
    for index in ${!files[*]}
    do
    	    if [[ -r ${files[$index]} ]]; then
		source ${files[$index]}
        fi
    done
}

install
unset -f install 

run_postinstall

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Force remove the vim directory if it's already there.
    if [ -e "${HOME}/.vim" ]; then
        rm -rf "${HOME}/.vim"
    fi

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "shell/bashrc"       ".bashrc"
    link "shell/bash_profile" ".bash_profile"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"

    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    e_header "Update dotfiles..."
    mirrorfiles
    unset -f mirrorfiles
    unset -f link
    source ${HOME}/.bash_profile
else
    unset -f mirrorfiles
    unset -f link
    printf "Aborting...\n"
    exit 1
fi

